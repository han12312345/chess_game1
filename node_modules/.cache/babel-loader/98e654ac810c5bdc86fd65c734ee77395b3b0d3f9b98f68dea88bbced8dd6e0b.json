{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\react-chess-game\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n// 渲染棋盘中的每个方格\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n// 计算获胜者\n_c = Square;\nfunction calculateWinner(squares, size = 15) {\n  const directions = [{\n    x: 1,\n    y: 0\n  },\n  // 水平\n  {\n    x: 0,\n    y: 1\n  },\n  // 垂直\n  {\n    x: 1,\n    y: 1\n  },\n  // 主对角线\n  {\n    x: 1,\n    y: -1\n  } // 副对角线\n  ];\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const currentPlayer = squares[row * size + col];\n      if (!currentPlayer) continue;\n      for (const direction of directions) {\n        let count = 1;\n        for (let step = 1; step < 5; step++) {\n          const nextRow = row + direction.y * step;\n          const nextCol = col + direction.x * step;\n          if (nextRow >= 0 && nextRow < size && nextCol >= 0 && nextCol < size && squares[nextRow * size + nextCol] === currentPlayer) {\n            count++;\n          } else {\n            break;\n          }\n        }\n        if (count === 5) {\n          return currentPlayer; // 如果找到五个连续的相同棋子，则返回获胜者\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// 棋盘组件\nfunction Board({\n  size,\n  squares,\n  onSquareClick\n}) {\n  const board = [];\n\n  // 渲染 15x15 的棋盘\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      const index = i * size + j;\n      row.push(/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[index],\n        onSquareClick: () => onSquareClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this));\n    }\n    board.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: row\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: board\n  }, void 0, false);\n}\n\n// 游戏主组件\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const size = 15; // 五子棋棋盘大小\n  const [history, setHistory] = useState([Array(size * size).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true); // X 先手\n  const currentSquares = history[currentMove];\n  const winner = calculateWinner(currentSquares, size);\n  function handlePlay(index) {\n    if (winner || currentSquares[index]) {\n      return; // 如果已有人获胜或该位置已有棋子，返回\n    }\n    const nextSquares = currentSquares.slice();\n    nextSquares[index] = xIsNext ? 'X' : 'O';\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n  function jumpTo(move) {\n    setCurrentMove(move);\n    setXIsNext(move % 2 === 0);\n  }\n  const moves = history.map((squares, move) => {\n    const description = move > 0 ? `Go to move #${move}` : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  });\n  let status;\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else {\n    status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        size: size,\n        squares: currentSquares,\n        onSquareClick: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"ODzqReVEAQc6QzXfxQTfUJUmx/c=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","calculateWinner","squares","size","directions","x","y","row","col","currentPlayer","direction","count","step","nextRow","nextCol","Board","board","i","j","index","push","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","xIsNext","setXIsNext","currentSquares","winner","handlePlay","nextSquares","slice","nextHistory","length","jumpTo","move","moves","map","description","status","_c3","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/react-chess-game/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\n// 渲染棋盘中的每个方格\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\n// 计算获胜者\nfunction calculateWinner(squares, size = 15) {\n  const directions = [\n    { x: 1, y: 0 },  // 水平\n    { x: 0, y: 1 },  // 垂直\n    { x: 1, y: 1 },  // 主对角线\n    { x: 1, y: -1 }, // 副对角线\n  ];\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const currentPlayer = squares[row * size + col];\n      if (!currentPlayer) continue;\n\n      for (const direction of directions) {\n        let count = 1;\n\n        for (let step = 1; step < 5; step++) {\n          const nextRow = row + direction.y * step;\n          const nextCol = col + direction.x * step;\n\n          if (\n            nextRow >= 0 &&\n            nextRow < size &&\n            nextCol >= 0 &&\n            nextCol < size &&\n            squares[nextRow * size + nextCol] === currentPlayer\n          ) {\n            count++;\n          } else {\n            break;\n          }\n        }\n\n        if (count === 5) {\n          return currentPlayer; // 如果找到五个连续的相同棋子，则返回获胜者\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\n// 棋盘组件\nfunction Board({ size, squares, onSquareClick }) {\n  const board = [];\n\n  // 渲染 15x15 的棋盘\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      const index = i * size + j;\n      row.push(\n        <Square\n          key={index}\n          value={squares[index]}\n          onSquareClick={() => onSquareClick(index)}\n        />\n      );\n    }\n    board.push(\n      <div className=\"board-row\" key={i}>\n        {row}\n      </div>\n    );\n  }\n\n  return <>{board}</>;\n}\n\n// 游戏主组件\nexport default function Game() {\n  const size = 15; // 五子棋棋盘大小\n  const [history, setHistory] = useState([Array(size * size).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true); // X 先手\n  const currentSquares = history[currentMove];\n  const winner = calculateWinner(currentSquares, size);\n\n  function handlePlay(index) {\n    if (winner || currentSquares[index]) {\n      return; // 如果已有人获胜或该位置已有棋子，返回\n    }\n\n    const nextSquares = currentSquares.slice();\n    nextSquares[index] = xIsNext ? 'X' : 'O';\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(move) {\n    setCurrentMove(move);\n    setXIsNext(move % 2 === 0);\n  }\n\n  const moves = history.map((squares, move) => {\n    const description = move > 0 ? `Go to move #${move}` : 'Go to game start';\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  let status;\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else {\n    status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board size={size} squares={currentSquares} onSquareClick={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <div className=\"status\">{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,MAAMA,CAAC;EAAEC,KAAK;EAAEC;AAAc,CAAC,EAAE;EACxC,oBACEL,OAAA;IAAQM,SAAS,EAAC,QAAQ;IAACC,OAAO,EAAEF,aAAc;IAAAG,QAAA,EAC/CJ;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;;AAEA;AAAAC,EAAA,GARSV,MAAM;AASf,SAASW,eAAeA,CAACC,OAAO,EAAEC,IAAI,GAAG,EAAE,EAAE;EAC3C,MAAMC,UAAU,GAAG,CACjB;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAAG;EACjB;IAAED,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAAG;EACjB;IAAED,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAAG;EACjB;IAAED,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;EAAE,CAAC,CAAE;EAAA,CAClB;EAED,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,IAAI,EAAEI,GAAG,EAAE,EAAE;IACnC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,IAAI,EAAEK,GAAG,EAAE,EAAE;MACnC,MAAMC,aAAa,GAAGP,OAAO,CAACK,GAAG,GAAGJ,IAAI,GAAGK,GAAG,CAAC;MAC/C,IAAI,CAACC,aAAa,EAAE;MAEpB,KAAK,MAAMC,SAAS,IAAIN,UAAU,EAAE;QAClC,IAAIO,KAAK,GAAG,CAAC;QAEb,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAE,EAAE;UACnC,MAAMC,OAAO,GAAGN,GAAG,GAAGG,SAAS,CAACJ,CAAC,GAAGM,IAAI;UACxC,MAAME,OAAO,GAAGN,GAAG,GAAGE,SAAS,CAACL,CAAC,GAAGO,IAAI;UAExC,IACEC,OAAO,IAAI,CAAC,IACZA,OAAO,GAAGV,IAAI,IACdW,OAAO,IAAI,CAAC,IACZA,OAAO,GAAGX,IAAI,IACdD,OAAO,CAACW,OAAO,GAAGV,IAAI,GAAGW,OAAO,CAAC,KAAKL,aAAa,EACnD;YACAE,KAAK,EAAE;UACT,CAAC,MAAM;YACL;UACF;QACF;QAEA,IAAIA,KAAK,KAAK,CAAC,EAAE;UACf,OAAOF,aAAa,CAAC,CAAC;QACxB;MACF;IACF;EACF;EAEA,OAAO,IAAI;AACb;;AAEA;AACA,SAASM,KAAKA,CAAC;EAAEZ,IAAI;EAAED,OAAO;EAAEV;AAAc,CAAC,EAAE;EAC/C,MAAMwB,KAAK,GAAG,EAAE;;EAEhB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,IAAI,EAAEc,CAAC,EAAE,EAAE;IAC7B,MAAMV,GAAG,GAAG,EAAE;IACd,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,IAAI,EAAEe,CAAC,EAAE,EAAE;MAC7B,MAAMC,KAAK,GAAGF,CAAC,GAAGd,IAAI,GAAGe,CAAC;MAC1BX,GAAG,CAACa,IAAI,cACNjC,OAAA,CAACG,MAAM;QAELC,KAAK,EAAEW,OAAO,CAACiB,KAAK,CAAE;QACtB3B,aAAa,EAAEA,CAAA,KAAMA,aAAa,CAAC2B,KAAK;MAAE,GAFrCA,KAAK;QAAAvB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACH,CAAC;IACH;IACAiB,KAAK,CAACI,IAAI,cACRjC,OAAA;MAAKM,SAAS,EAAC,WAAW;MAAAE,QAAA,EACvBY;IAAG,GAD0BU,CAAC;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE5B,CACP,CAAC;EACH;EAEA,oBAAOZ,OAAA,CAAAE,SAAA;IAAAM,QAAA,EAAGqB;EAAK,gBAAG,CAAC;AACrB;;AAEA;AAAAK,GAAA,GA1BSN,KAAK;AA2Bd,eAAe,SAASO,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAMpB,IAAI,GAAG,EAAE,CAAC,CAAC;EACjB,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGxC,QAAQ,CAAC,CAACyC,KAAK,CAACvB,IAAI,GAAGA,IAAI,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACvE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG5C,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC6C,OAAO,EAAEC,UAAU,CAAC,GAAG9C,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM+C,cAAc,GAAGR,OAAO,CAACI,WAAW,CAAC;EAC3C,MAAMK,MAAM,GAAGhC,eAAe,CAAC+B,cAAc,EAAE7B,IAAI,CAAC;EAEpD,SAAS+B,UAAUA,CAACf,KAAK,EAAE;IACzB,IAAIc,MAAM,IAAID,cAAc,CAACb,KAAK,CAAC,EAAE;MACnC,OAAO,CAAC;IACV;IAEA,MAAMgB,WAAW,GAAGH,cAAc,CAACI,KAAK,CAAC,CAAC;IAC1CD,WAAW,CAAChB,KAAK,CAAC,GAAGW,OAAO,GAAG,GAAG,GAAG,GAAG;IACxC,MAAMO,WAAW,GAAG,CAAC,GAAGb,OAAO,CAACY,KAAK,CAAC,CAAC,EAAER,WAAW,GAAG,CAAC,CAAC,EAAEO,WAAW,CAAC;IACvEV,UAAU,CAACY,WAAW,CAAC;IACvBR,cAAc,CAACQ,WAAW,CAACC,MAAM,GAAG,CAAC,CAAC;IACtCP,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB;EAEA,SAASS,MAAMA,CAACC,IAAI,EAAE;IACpBX,cAAc,CAACW,IAAI,CAAC;IACpBT,UAAU,CAACS,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;EAC5B;EAEA,MAAMC,KAAK,GAAGjB,OAAO,CAACkB,GAAG,CAAC,CAACxC,OAAO,EAAEsC,IAAI,KAAK;IAC3C,MAAMG,WAAW,GAAGH,IAAI,GAAG,CAAC,GAAG,eAAeA,IAAI,EAAE,GAAG,kBAAkB;IACzE,oBACErD,OAAA;MAAAQ,QAAA,eACER,OAAA;QAAQO,OAAO,EAAEA,CAAA,KAAM6C,MAAM,CAACC,IAAI,CAAE;QAAA7C,QAAA,EAAEgD;MAAW;QAAA/C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC,GADpDyC,IAAI;MAAA5C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAET,CAAC;EAET,CAAC,CAAC;EAEF,IAAI6C,MAAM;EACV,IAAIX,MAAM,EAAE;IACVW,MAAM,GAAG,WAAWX,MAAM,EAAE;EAC9B,CAAC,MAAM;IACLW,MAAM,GAAG,gBAAgBd,OAAO,GAAG,GAAG,GAAG,GAAG,EAAE;EAChD;EAEA,oBACE3C,OAAA;IAAKM,SAAS,EAAC,MAAM;IAAAE,QAAA,gBACnBR,OAAA;MAAKM,SAAS,EAAC,YAAY;MAAAE,QAAA,eACzBR,OAAA,CAAC4B,KAAK;QAACZ,IAAI,EAAEA,IAAK;QAACD,OAAO,EAAE8B,cAAe;QAACxC,aAAa,EAAE0C;MAAW;QAAAtC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eACNZ,OAAA;MAAKM,SAAS,EAAC,WAAW;MAAAE,QAAA,gBACxBR,OAAA;QAAKM,SAAS,EAAC,QAAQ;QAAAE,QAAA,EAAEiD;MAAM;QAAAhD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtCZ,OAAA;QAAAQ,QAAA,EAAK8C;MAAK;QAAA7C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACwB,EAAA,CArDuBD,IAAI;AAAAuB,GAAA,GAAJvB,IAAI;AAAA,IAAAtB,EAAA,EAAAqB,GAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAA9C,EAAA;AAAA8C,YAAA,CAAAzB,GAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}